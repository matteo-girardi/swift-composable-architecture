{"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"abstract":[{"text":"Update your code to use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.11"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"text":" ","type":"text"},{"text":"simplify the library, and make it more powerful. This version of the library introduced 2 new","type":"text"},{"text":" ","type":"text"},{"text":"APIs and deprecated 1 API.","type":"text"}]},{"type":"aside","style":"important","content":[{"inlineContent":[{"text":"Before following this migration guide be sure you have fully migrated to the newest","type":"text"},{"text":" ","type":"text"},{"text":"tools of version 1.10. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"reference"},{"text":" for more information.","type":"text"}],"type":"paragraph"}],"name":"Important"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Mutating-shared-state-concurrently"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Supplying-mock-read-only-state-to-previews","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Migrating-to-1112","isActive":true}],"type":"paragraph"}]}]},{"type":"heading","level":2,"text":"Mutating shared state concurrently","anchor":"Mutating-shared-state-concurrently"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.10 of the Composable Architecture introduced a powerful tool for"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","overridingTitleInlineContent":[{"text":"sharing state","type":"text"}],"type":"reference","overridingTitle":"sharing state","isActive":true},{"type":"text","text":" amongst your features. And you can mutate a piece of shared"},{"type":"text","text":" "},{"type":"text","text":"state directly, as if it were just a normal property on a value type:"}]},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do."},{"type":"text","text":" "},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"type":"text","text":" "},{"type":"text","text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible"},{"type":"text","text":" "},{"type":"text","text":"to do this directly:"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"type":"text","text":" "},{"type":"text","text":"to it from two different threads. However, allowing direct mutation does make the value susceptible"},{"type":"text","text":" "},{"type":"text","text":"to race conditions. If you were to perform "},{"type":"codeVoice","code":"count += 1"},{"type":"text","text":" from 1,000 threads, it is possible for"},{"type":"text","text":" "},{"type":"text","text":"the final value to not be 1,000."}]},{"type":"paragraph","inlineContent":[{"text":"We wanted the ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" type to be as ergonomic as possible, and that is why we make it directly","type":"text"},{"text":" ","type":"text"},{"text":"mutable, but we should not be allowing these mutations to happen from asynchronous contexts. And so","type":"text"},{"text":" ","type":"text"},{"text":"now the ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"text":" setter has been marked unavailable from asynchronous contexts, with","type":"text"},{"text":" ","type":"text"},{"text":"a helpful message of how to fix:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this deprecation you can use the new "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method on the projected value of "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"type":"text","text":" "},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"text":"Technically it is still possible to write code that has race conditions, such as this silly example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"type":"text","text":"shared state as possible in a single "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":". That will make sure that the full unit of work is"},{"type":"text","text":" "},{"type":"text","text":"guarded by a lock."}]},{"type":"heading","level":2,"text":"Supplying mock read-only state to previews","anchor":"Supplying-mock-read-only-state-to-previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new "},{"type":"codeVoice","code":"constant"},{"type":"text","text":" helper on "},{"type":"codeVoice","code":"SharedReader"},{"type":"text","text":" has been introduced to simplify supplying mock data to"},{"type":"text","text":" "},{"type":"text","text":"Xcode previews. It works like SwiftUI’s "},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", but for shared references:"}]},{"syntax":"swift","type":"codeListing","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"]},{"level":2,"type":"heading","text":"Migrating to 1.11.2","anchor":"Migrating-to-1112"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:"}]},{"level":3,"type":"heading","text":"`withLock` is now `@MainActor`","anchor":"withLock-is-now-MainActor"},{"type":"paragraph","inlineContent":[{"text":"In ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","overridingTitle":"version 1.11","isActive":true,"overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}],"type":"reference"},{"text":" of the library we deprecated mutating shared state from","type":"text"},{"text":" ","type":"text"},{"text":"asynchronous contexts, such as effects, and instead recommended using the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"text":"Doing so made it possible to lock all mutations to the shared state and prevent race conditions (see","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","overridingTitle":"migration guide","isActive":true,"overridingTitleInlineContent":[{"text":"migration guide","type":"text"}],"type":"reference"},{"text":" for more info).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this did leave open the possibility for deadlocks if shared state was read from and written"},{"type":"text","text":" "},{"type":"text","text":"to on different threads. To fix this we have now restricted "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":", and so"},{"type":"text","text":" "},{"type":"text","text":"you will now need to "},{"type":"codeVoice","code":"await"},{"type":"text","text":" its usage:"}]},{"code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"text":"The compiler should suggest this fix-it for you.","type":"text"}]},{"level":3,"type":"heading","text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored","anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored"},{"type":"paragraph","inlineContent":[{"text":"When the ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper was first introduced, its dynamic member lookup was overloaded","type":"text"},{"text":" ","type":"text"},{"text":"to automatically unwrap optionals for ergonomic purposes:","type":"text"}]},{"code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This unfortunately made dynamic member lookup a little more difficult to understand:","type":"text"}]},{"code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"…and required casting and other tricks to transform shared values into what one might expect.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be"},{"type":"text","text":" "},{"type":"text","text":"removed entirely. Instead, you can use "},{"type":"codeVoice","code":"Shared.init(_:)"},{"type":"text","text":" to explicitly unwrap a shared optional"},{"type":"text","text":" "},{"type":"text","text":"value."}]},{"type":"paragraph","inlineContent":[{"text":"Disfavoring it does have the consequence of being source breaking in the case of ","type":"text"},{"type":"codeVoice","code":"if let"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"guard let"},{"text":" expressions, where Swift does not select the optional overload automatically. To","type":"text"},{"text":" ","type":"text"},{"text":"migrate, use ","type":"text"},{"type":"codeVoice","code":"Shared.init(_:)"},{"text":":","type":"text"}]},{"code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"}],"kind":"content"}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Migrating to 1.11","roleHeading":"Article"},"references":{"#Mutating-shared-state-concurrently":{"identifier":"#Mutating-shared-state-concurrently","title":"Mutating shared state concurrently","titleInlineContent":[{"text":"Mutating shared state concurrently","type":"text"}],"url":"#Mutating-shared-state-concurrently","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"type":"topic","abstract":[{"text":"Update your code to use the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","title":"Migrating to 1.11","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","kind":"article","abstract":[{"type":"text","text":"Store internals have been rewritten for performance and future features, and are now compatible with"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" property wrapper."}],"role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.19","title":"Migrating to 1.19","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"title":"Migrating to 1.14","type":"topic","abstract":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":", and more."}],"url":"\/documentation\/composablearchitecture\/migratingto1.7","title":"Migrating to 1.7","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"kind":"article","title":"Migrating to 1.15","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"text":" ","type":"text"},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.13","title":"Migrating to 1.13","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"deprecated":true,"title":"ForEachStore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"topic","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"kind":"symbol","role":"symbol","title":"dependency(_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method on "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"kind":"article","title":"Migrating to 1.9","url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"url":"\/documentation\/composablearchitecture\/migratingto1.17","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"type":"text","text":" "},{"type":"text","text":"library so that they can be used in non-Composable Architecture applications. This a"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"type":"topic","role":"article","kind":"article","title":"Migrating to 1.17","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro, and learn how to better leverage case key","type":"text"},{"text":" ","type":"text"},{"text":"paths in your features.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.4","role":"article","type":"topic","kind":"article","title":"Migrating to 1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","title":"Migrating to 1.10","type":"topic","role":"article","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"type":"codeVoice","code":"appStorage"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fileStorage"},{"text":" persistence strategies.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"title":"TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"codeVoice","code":"Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","type":"topic","title":"Migrating to 1.5","url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"abstract":[{"type":"text","text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"type":"topic","kind":"article","role":"article","title":"Migrating to 1.17.1","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"kind":"symbol","deprecated":true,"abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"title":"IfLetStore","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"role":"article","title":"Migrating to 1.12","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"text":" ","type":"text"},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"title":"WithViewStore","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}]},"#Supplying-mock-read-only-state-to-previews":{"titleInlineContent":[{"text":"Supplying mock read-only state to previews","type":"text"}],"type":"link","identifier":"#Supplying-mock-read-only-state-to-previews","url":"#Supplying-mock-read-only-state-to-previews","title":"Supplying mock read-only state to previews"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"url":"\/documentation\/composablearchitecture\/sharingstate","title":"Sharing state","type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","role":"article","type":"topic","title":"Migrating to 1.8","kind":"article","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"title":"ComposableArchitecture","role":"collection","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"title":"Migrating to 1.6","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"role":"article","abstract":[{"text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit","type":"text"},{"text":" ","type":"text"},{"text":"navigation helper has been introduced.","type":"text"}],"type":"topic","kind":"article","title":"Migrating to 1.18","url":"\/documentation\/composablearchitecture\/migratingto1.18","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","type":"topic","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for a type.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()"},"#Migrating-to-1112":{"identifier":"#Migrating-to-1112","title":"Migrating to 1.11.2","titleInlineContent":[{"text":"Migrating to 1.11.2","type":"text"}],"url":"#Migrating-to-1112","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","kind":"article","abstract":[{"text":"The ","type":"text"},{"code":".appStorage","type":"codeVoice"},{"text":" strategy used with ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" now uses key-value observing instead of","type":"text"},{"text":" ","type":"text"},{"code":"NotificationCenter","type":"codeVoice"},{"text":" when possible. Learn how this may affect your code.","type":"text"}],"role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.16","title":"Migrating to 1.16","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"kind":"article","url":"\/documentation\/composablearchitecture\/migrationguides","title":"Migration guides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"topic"}}}