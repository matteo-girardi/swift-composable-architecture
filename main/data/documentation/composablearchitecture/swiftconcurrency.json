{"metadata":{"title":"Adopting Swift concurrency","roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}]},"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"kind":"article","seeAlsoSections":[{"anchor":"Integrations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"title":"Integrations"}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"type":"text","text":" "},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"type":"text","text":" "},{"type":"text","text":"you will need to know how to prove to the compiler that your types are safe to use concurrently."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There primary way to create an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" in the library is via"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":". It takes a "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":", asynchronous closure,"},{"type":"text","text":" "},{"type":"text","text":"which restricts the types of closures you can use for your effects. In particular, the closure can"},{"type":"text","text":" "},{"type":"text","text":"only capture "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" variables that are bound with "},{"type":"codeVoice","code":"let"},{"type":"text","text":". Mutable variables and non-"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" "},{"type":"text","text":"types are simply not allowed to be passed to "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures."}]},{"type":"paragraph","inlineContent":[{"text":"There are two primary ways you will run into this restriction when building a feature in the","type":"text"},{"text":" ","type":"text"},{"text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from","type":"text"},{"text":" ","type":"text"},{"text":"within an effect.","type":"text"}]},{"type":"heading","anchor":"Accessing-state-in-an-effect","text":"Accessing state in an effect","level":3},{"type":"paragraph","inlineContent":[{"text":"Reducers are executed with a mutable, ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":" state variable, and such variables cannot be accessed","type":"text"},{"text":" ","type":"text"},{"text":"from within ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":" closures:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"To work around this you must explicitly capture the state as an immutable value for the scope of the","type":"text"},{"text":" ","type":"text"},{"text":"closure:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"]},{"type":"paragraph","inlineContent":[{"text":"You can also capture just the minimal parts of the state you need for the effect by binding a new","type":"text"},{"text":" ","type":"text"},{"text":"variable name for the capture:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"]},{"type":"heading","anchor":"Accessing-dependencies-in-an-effect","level":3,"text":"Accessing dependencies in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"type":"text","text":" "},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your dependency is not sendable, you will be notified at the time of registering it with the"},{"type":"text","text":" "},{"type":"text","text":"library. In particular, when extending "},{"type":"codeVoice","code":"DependencyValues"},{"type":"text","text":" to provide the computed property:"}]},{"type":"codeListing","syntax":"swift","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"FactClient","type":"codeVoice"},{"text":" is not ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":", for whatever reason, you will get a warning in the ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" lines:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"]},{"type":"paragraph","inlineContent":[{"text":"To fix this you need to make each dependency ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":". This usually just means making sure","type":"text"},{"text":" ","type":"text"},{"text":"that the interface type only holds onto ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" data, and in particular, any closure-based","type":"text"},{"text":" ","type":"text"},{"text":"endpoints should be annotated as ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"]},{"type":"paragraph","inlineContent":[{"text":"This will restrict the kinds of closures that can be used when constructing ","type":"text"},{"code":"FactClient","type":"codeVoice"},{"text":" values, thus","type":"text"},{"text":" ","type":"text"},{"text":"making the entire ","type":"text"},{"code":"FactClient","type":"codeVoice"},{"text":" sendable itself.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"title":"ComposableArchitecture","role":"collection","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"title":"Observation backport","url":"\/documentation\/composablearchitecture\/observationbackport","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","type":"topic","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","url":"\/documentation\/composablearchitecture\/uikit","type":"topic","title":"UIKit Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"role":"symbol","type":"topic","title":"run(priority:operation:catch:fileID:filePath:line:column:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","preciseIdentifier":"s:ScP","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"url":"\/documentation\/composablearchitecture\/swiftuiintegration","kind":"article","title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]}}}