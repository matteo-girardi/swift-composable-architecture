{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"@warn_unqualified_access","kind":"attribute"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"keyPath","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"A key path that indicates the property of the ","type":"text"},{"code":"DependencyValues","type":"codeVoice"},{"text":" structure to","type":"text"},{"text":" ","type":"text"},{"text":"update.","type":"text"}],"type":"paragraph"}],"name":"keyPath"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The new value to set for the item specified by ","type":"text"},{"type":"codeVoice","code":"keyPath"},{"text":".","type":"text"}]}],"name":"value"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer that has the given value set in its dependencies."}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This overrides the dependency specified by "},{"type":"codeVoice","code":"keyPath"},{"type":"text","text":" for the execution of the receiving"},{"type":"text","text":" "},{"type":"text","text":"reducer "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" all of its effects. It can be useful for altering the dependencies for just"},{"type":"text","text":" "},{"type":"text","text":"one portion of your application, while letting the rest of the application continue using the"},{"type":"text","text":" "},{"type":"text","text":"default live dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you are creating an onboarding experience to teach people how to use one"},{"type":"text","text":" "},{"type":"text","text":"of your features. This can be done by constructing a new reducer that embeds the core"},{"type":"text","text":" "},{"type":"text","text":"feature’s domain and layers on additional logic:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Onboarding {","  struct State {","    var feature: Feature.State","    \/\/ Additional onboarding state","  }","  enum Action {","    case feature(Feature.Action)","    \/\/ Additional onboarding actions","  }","","  var body: some Reducer<State, Action> {","    Scope(state: \\.feature, action: \\.feature) {","      Feature()","    }","","    Reduce { state, action in","      \/\/ Additional onboarding logic","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This can work just fine, but the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"text":" reducer will have access to all of the live","type":"text"},{"text":" ","type":"text"},{"text":"dependencies by default, and that might not be ideal. For example, the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"text":" reducer","type":"text"},{"text":" ","type":"text"},{"text":"may need to make API requests and read\/write from user defaults. It may be preferable","type":"text"},{"text":" ","type":"text"},{"text":"to run the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"text":" reducer in an alternative environment for onboarding purposes, such","type":"text"},{"text":" ","type":"text"},{"text":"as an API client that returns some mock data or an in-memory user defaults so that the","type":"text"},{"text":" ","type":"text"},{"text":"onboarding experience doesn’t accidentally trample on shared data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be by using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/dependency(_:_:)","isActive":true},{"type":"text","text":" method to override those dependencies"},{"type":"text","text":" "},{"type":"text","text":"just for the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer and its effects:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some Reducer<State, Action> {","  Scope(state: \\.feature, action: \\.feature) {","    Feature()","      .dependency(\\.apiClient, .mock)","      .dependency(\\.userDefaults, .mock)","  }","","  Reduce { state, action in","    \/\/ Additional onboarding logic","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/transformDependency(_:transform:)","type":"reference"},{"text":" for a similar method that can inspect and modify the","type":"text"},{"text":" ","type":"text"},{"text":"current dependency when overriding.","type":"text"}]}]}],"kind":"symbol","abstract":[{"type":"text","text":"Sets the dependency value of the specified key path to the given value."}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"extendedModule":"ComposableArchitecture","modules":[{"name":"ComposableArchitecture"}],"role":"symbol","externalID":"s:22ComposableArchitecture7ReducerPAAE10dependencyyAA021_DependencyKeyWritingC0VyxGs08WritableF4PathCy12Dependencies0E6ValuesVqd__G_qd__tlF::SYNTHESIZED::s:22ComposableArchitecture5ScopeV","roleHeading":"Instance Method","title":"dependency(_:_:)","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/Reducer-Implementations"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/dependency(_:_:)"},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/scope\/dependency(_:_:)"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/transformDependency(_:transform:)":{"abstract":[{"type":"text","text":"Transform a reducer’s dependency value at the specified key path with the given function."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"transformDependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"transform","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/scope\/transformdependency(_:transform:)","title":"transformDependency(_:transform:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/transformDependency(_:transform:)","role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}],"url":"\/documentation\/composablearchitecture\/scope","navigatorTitle":[{"text":"Scope","kind":"identifier"}],"title":"Scope","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/dependency(_:_:)":{"kind":"symbol","title":"dependency(_:_:)","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/dependency(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Sets the dependency value of the specified key path to the given value."}],"url":"\/documentation\/composablearchitecture\/scope\/dependency(_:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"title":"ComposableArchitecture","role":"collection","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/Reducer-Implementations":{"role":"collectionGroup","kind":"article","abstract":[],"url":"\/documentation\/composablearchitecture\/scope\/reducer-implementations","title":"Reducer Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/Reducer-Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]}}}