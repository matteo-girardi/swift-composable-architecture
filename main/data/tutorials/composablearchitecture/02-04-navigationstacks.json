{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-04-navigationstacks"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}]}],"title":"Navigation stacks","estimatedTimeInMinutes":30,"chapter":"Navigation"},{"kind":"tasks","tasks":[{"anchor":"Contact-detail-feature","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"We are going to add a new “Contact Detail” feature that will allow us to drill down a layer","type":"text"},{"text":" ","type":"text"},{"text":"from the contacts list at the root.","type":"text"}]}],"mediaPosition":"trailing"}],"title":"Contact detail feature","stepsSection":[{"code":"02-04-01-code-0000.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Create a new file called ContactDetailFeature.swift, import the Composable Architecture, and","type":"text"},{"text":" ","type":"text"},{"text":"start a stub of a reducer by using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null},{"code":"02-04-01-code-0001.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference"},{"type":"text","text":" struct to fulfill that requirement for the"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" protocol. The only state we currently need is the"},{"type":"text","text":" "},{"type":"text","text":"contact, and it can be "},{"type":"codeVoice","code":"let"},{"type":"text","text":" since we do not plan on mutating it from this screen."}]}],"type":"step","caption":[],"media":null},{"code":"02-04-01-code-0002.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add an ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","isActive":true,"type":"reference"},{"text":" enum to fulfill that requirement for the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol. There are not currently any actions that can","type":"text"},{"text":" ","type":"text"},{"text":"be performed in this feature, so we will leave it empty.","type":"text"}]}],"type":"step","caption":[],"media":null},{"code":"02-04-01-code-0003.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement a basic "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"type":"text","text":" property to fulfill that"},{"type":"text","text":" "},{"type":"text","text":"requirement of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol. Since there are no actions in"},{"type":"text","text":" "},{"type":"text","text":"this feature there is nothing we can do in the reducer. More will be added to this later."}]}],"type":"step","caption":[],"media":null},{"code":"02-04-01-code-0004.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Create a stub for a ","type":"text"},{"code":"ContactDetailView","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null},{"code":"02-04-01-code-0005.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The view will hold onto a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" domain, allowing it to observe the feature’s state changes and"},{"type":"text","text":" "},{"type":"text","text":"send actions."}]}],"type":"step","caption":[],"media":null},{"code":"02-04-01-code-0006.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Stub out a basic form. There is no real information to show in this view now other than the"},{"type":"text","text":" "},{"type":"text","text":"contact’s name, but more will be added later."}],"type":"paragraph"}],"type":"step","caption":[],"media":null},{"code":"02-04-01-code-0007.swift","runtimePreview":"ch02-sub04-sec01-image-0000.png","content":[{"inlineContent":[{"type":"text","text":"Add a preview so that we can see what the view looks like."}],"type":"paragraph"}],"type":"step","caption":[],"media":null},{"inlineContent":[{"type":"text","text":"Nothing special so far, but we need a basic feature built so that we start pushing it onto"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack."}],"type":"paragraph"}]},{"anchor":"Drill-down-to-contact-detail","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Now that a new “Contact Detail” feature has been built we will make it possible to drill"},{"type":"text","text":" "},{"type":"text","text":"down to it from the main list of contacts."}],"type":"paragraph"}]}],"title":"Drill-down to contact detail","stepsSection":[{"caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" type is specifically made for the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture, and makes it easy and ergonomic to integrate stack navigation"},{"type":"text","text":" "},{"type":"text","text":"into your applications."}]}]}],"code":"02-04-02-code-0000.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Go to ContactsFeature.swift and add a new field to the state. It will be of type","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"text":", generic of the feature that you want to be able to","type":"text"},{"text":" ","type":"text"},{"text":"push onto the stack. This state represents the features that are currently","type":"text"},{"text":" ","type":"text"},{"text":"pushed onto the stack.","type":"text"}]}],"media":null,"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"We will also handle the ","type":"text"},{"code":".path","type":"codeVoice"},{"text":" case in the reducer and return","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","isActive":true,"type":"reference"},{"text":" for now.","type":"text"}]},{"name":"Tip","type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"type":"text","text":" is generic over both state and action of the "},{"code":"Path","type":"codeVoice"},{"type":"text","text":" domain, and so"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","isActive":true,"type":"reference"},{"type":"text","text":" type alias to simplify the syntax a bit."}]}]}],"code":"02-04-02-code-0001.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a case to the action enum that holds onto ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This represents the actions that can happen inside the stack, such as pushing or popping","type":"text"},{"text":" ","type":"text"},{"text":"an element off the stack, or an action happening inside a particular feature inside the","type":"text"},{"text":" ","type":"text"},{"text":"stack.","type":"text"}]}],"media":null,"type":"step"},{"caption":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Scroll down to the bottom of the code snippet to see the application of the","type":"text"},{"text":" ","type":"text"},{"code":"forEach","type":"codeVoice"},{"text":" operator.","type":"text"}]}],"style":"tip","type":"aside","name":"Tip"}],"code":"02-04-02-code-0002.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"At the very end of the reducer use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"to integrate the "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" into the stack of the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"type":"step"},{"caption":[],"code":"02-04-02-code-0003.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Go to the ","type":"text"},{"type":"codeVoice","code":"ContactsView"},{"text":" that holds the view for the contacts list. Swap out the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is a special initializer that is specifically tuned for driving stacks from a","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"You hand it a binding to a store that is scoped down to","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"text":", and it","type":"text"},{"text":" ","type":"text"},{"text":"handles the rest.","type":"text"}]}],"media":null,"type":"step"},{"caption":[],"code":"02-04-02-code-0004.swift","runtimePreview":null,"content":[{"inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"text":" takes two trailing","type":"text"},{"text":" ","type":"text"},{"text":"closures. The first is for the root of the stack, which is our list of contacts. The second","type":"text"},{"text":" ","type":"text"},{"text":"is to describe the destinations that can be navigated to. It is handled a store that is","type":"text"},{"text":" ","type":"text"},{"text":"focused on the domain of just a single element in the stack.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step"},{"caption":[{"type":"aside","style":"warning","name":"Warning","content":[{"inlineContent":[{"type":"text","text":"It is necessary to use the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)"},{"type":"text","text":" initializer on "},{"code":"NavigationLink","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instead of the "},{"code":"init(value:)","type":"codeVoice"},{"type":"text","text":" initializer that comes with SwiftUI."}],"type":"paragraph"}]}],"code":"02-04-02-code-0005.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Wrap the row in the contacts list in a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", using the special"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","type":"reference","isActive":true},{"type":"text","text":" initializer that ships with this"},{"type":"text","text":" "},{"type":"text","text":"library. We are also applying a "},{"type":"codeVoice","code":".borderless"},{"type":"text","text":" button style so that we can have the delete"},{"type":"text","text":" "},{"type":"text","text":"button in the row too."}]}],"media":null,"type":"step"},{"caption":[],"code":"02-04-02-code-0006.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Navigation is performed using a ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"text":" and so the ","type":"text"},{"code":"deleteButtonTapped","type":"codeVoice"},{"text":" action is","type":"text"},{"text":" ","type":"text"},{"text":"no longer needed.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step"},{"caption":[],"code":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Run the application to see that we can now drill down one level, for each contact.","type":"text"}],"type":"paragraph"}],"media":"ch02-sub04-sec01-video-0000.mov","type":"step"}]},{"anchor":"Deleting-a-contact","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"We now have some drill-down functionality in our contacts app, but currently there is no","type":"text"},{"text":" ","type":"text"},{"text":"interaction between the detail screen and the contacts list. Let’s change this by allowing","type":"text"},{"text":" ","type":"text"},{"text":"you to delete a contact from the detail screen. We will first prompt the user with an alert","type":"text"},{"text":" ","type":"text"},{"text":"asking them to confirm deletion, just as we did in ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}],"title":"Deleting a contact","stepsSection":[{"code":"02-04-03-code-0000.swift","type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Go to ContactDetailFeature.swift to add more functionality to the reducer and view. We","type":"text"},{"text":" ","type":"text"},{"text":"will start by adding some optional ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference"},{"text":" to represent","type":"text"},{"text":" ","type":"text"},{"text":"show the alert.","type":"text"}],"type":"paragraph"}],"caption":[]},{"code":"02-04-03-code-0001.swift","type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Add cases to ","type":"text"},{"type":"codeVoice","code":"ContactDetailFeature.Action"},{"text":" for all the things the user can do in the UI,","type":"text"},{"text":" ","type":"text"},{"text":"such as tapping the “Delete” button, as well as any actions inside the alert and the","type":"text"},{"text":" ","type":"text"},{"text":"delegate actions for when we need to tell the parent feature to delete the contact.","type":"text"}],"type":"paragraph"}],"caption":[{"style":"note","content":[{"inlineContent":[{"type":"text","text":"The alert and delegate actions do not need an ID like was needed before. You will"},{"type":"text","text":" "},{"type":"text","text":"see why soon."}],"type":"paragraph"}],"name":"Note","type":"aside"}]},{"code":"02-04-03-code-0002.swift","type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Implement the new actions in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" property. This is very similar to what we did in"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"reference","isActive":true},{"type":"text","text":". We will handle confirming of deletion by sending a"},{"type":"text","text":" "},{"type":"text","text":"delegate action and dismissing using the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"dependency, and we have extracted the alert state to its own helper to make it easier to"},{"type":"text","text":" "},{"type":"text","text":"test later."}],"type":"paragraph"}],"caption":[]},{"code":"02-04-03-code-0003.swift","type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the "},{"type":"codeVoice","code":"ContactDetailView"},{"type":"text","text":" struct and add a button for deleting the contact, as well as"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" modifier to show an alert with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"caption":[]},{"code":"02-04-03-code-0004.swift","type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Go to ContactsFeature.swift and destructure the ","type":"text"},{"code":".path","type":"codeVoice"},{"text":" action in order to inspect what","type":"text"},{"text":" ","type":"text"},{"text":"is happening in each element of the stack. In particular, we want to listen for when a","type":"text"},{"text":" ","type":"text"},{"code":".delegate(.confirmDeletion)","type":"codeVoice"},{"text":" action is sent, and in that case remove the contact from the","type":"text"},{"text":" ","type":"text"},{"text":"array.","type":"text"}],"type":"paragraph"}],"caption":[]},{"code":null,"type":"step","media":"ch02-sub04-sec03-video-0000.mp4","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Run the preview to see that the application works as expected. You can drill down to a"},{"type":"text","text":" "},{"type":"text","text":"contact, tap the delete button, confirm deletion, and then the detail is popped off the"},{"type":"text","text":" "},{"type":"text","text":"stack and the contact is removed from the list."}],"type":"paragraph"}],"caption":[]}]}]}],"metadata":{"category":"The Composable Architecture","role":"project","title":"Navigation stacks","categoryPathComponent":"MeetComposableArchitecture"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"},"kind":"project","hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"type":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","title":"Delete contacts","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","kind":"section","title":"Adding a tab view"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","abstract":[{"text":"Drives a navigation stack with a store.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"path"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV","text":"Binding"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>>, "},{"kind":"externalParam","text":"root"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","role":"symbol","conformance":{"constraints":[{"code":"Root","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"init(path:root:destination:fileID:filePath:line:column:)","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"title":"Your first presentation","kind":"project","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","role":"project","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},"ch02-sub04-sec01-video-0000.mov":{"type":"video","identifier":"ch02-sub04-sec01-video-0000.mov","alt":null,"poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/ch02-sub04-sec01-video-0000.mov"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/state","title":"State","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"required":true},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","kind":"project","title":"Testing your feature","type":"topic","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","estimatedTime":"1hr 0min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","title":"Managing a timer","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","title":"Testing effects","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]},"02-04-02-code-0003.swift":{"identifier":"02-04-02-code-0003.swift","type":"file","highlights":[{"line":8}],"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"fileType":"swift","fileName":"ContactsFeature.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"title":"PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","url":"\/documentation\/composablearchitecture\/effect\/none","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","role":"symbol","title":"none"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","estimatedTime":"30min","title":"Navigation stacks","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"project"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"overview","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","url":"\/tutorials\/meetcomposablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"navigatorTitle":[{"text":"DismissEffect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","title":"DismissEffect","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project","title":"Adding side effects","type":"topic","kind":"project"},"ch02-sub04-sec03-video-0000.mp4":{"type":"video","identifier":"ch02-sub04-sec03-video-0000.mp4","alt":null,"poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/ch02-sub04-sec03-video-0000.mp4"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","title":"Composing reducers","kind":"section","type":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","role":"project","type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","title":"Testing presentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"title":"Child-to-parent communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"topic","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","type":"section","role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"02-04-01-code-0001.swift":{"type":"file","syntax":"swift","fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0001.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","}"]},"02-04-01-code-0004.swift":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  var body: some View {","  }","}"],"fileType":"swift","highlights":[],"identifier":"02-04-01-code-0004.swift","fileName":"ContactDetailFeature.swift","type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/action","role":"symbol","required":true,"title":"Action","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"symbol","abstract":[{"text":"A type that holds all possible actions that cause the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","isActive":true,"type":"reference"},{"text":" of the reducer to change","type":"text"},{"text":" ","type":"text"},{"text":"and\/or kick off a side ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":" that can communicate with the outside world.","type":"text"}],"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Action","kind":"identifier"}]},"02-04-01-code-0002.swift":{"highlights":[{"line":9},{"line":10}],"syntax":"swift","fileName":"ContactDetailFeature.swift","fileType":"swift","type":"file","identifier":"02-04-01-code-0002.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","  enum Action {","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","title":"Performing a network request","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackActionOf":{"url":"\/documentation\/composablearchitecture\/stackactionof","kind":"symbol","title":"StackActionOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackActionOf"}],"navigatorTitle":[{"kind":"identifier","text":"StackActionOf"}],"type":"topic","abstract":[{"text":"A convenience type alias for referring to a stack action of a given reducer’s domain.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","title":"Testing the delete contact flow"},"02-04-03-code-0003.swift":{"highlights":[{"line":5},{"line":9},{"line":10},{"line":11},{"line":14}],"identifier":"02-04-03-code-0003.swift","fileName":"ContactDetailFeature.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  @Bindable var store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","      Button(\"Delete\") {","        store.send(.deleteButtonTapped)","      }","    }","    .navigationTitle(Text(store.contact.name))","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}","","#Preview {","  NavigationStack {","    ContactDetailView(","      store: Store(","        initialState: ContactDetailFeature.State(","          contact: Contact(id: UUID(), name: \"Blob\")","        )","      ) {","        ContactDetailFeature()","      }","    )","  }","}"],"syntax":"swift","type":"file"},"02-04-02-code-0002.swift":{"type":"file","identifier":"02-04-02-code-0002.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":55},{"line":56},{"line":57}],"fileName":"ContactsFeature.swift"},"02-04-02-code-0005.swift":{"content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          NavigationLink(state: ContactDetailFeature.State(contact: contact)) {","            HStack {","              Text(contact.name)","              Spacer()","              Image(systemName: \"trash\")","                .foregroundStyle(Color.red)","            }","          }","          .buttonStyle(.borderless)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"fileName":"ContactsFeature.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":13},{"line":16}],"identifier":"02-04-02-code-0005.swift","syntax":"swift"},"02-04-03-code-0001.swift":{"type":"file","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"fileName":"ContactDetailFeature.swift","syntax":"swift","fileType":"swift","identifier":"02-04-03-code-0001.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section"},"02-04-01-code-0000.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","}"],"fileType":"swift","highlights":[],"identifier":"02-04-01-code-0000.swift","fileName":"ContactDetailFeature.swift","type":"file"},"02-04-02-code-0001.swift":{"fileName":"ContactsFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"identifier":"02-04-02-code-0001.swift","highlights":[{"line":15},{"line":47},{"line":48},{"line":49}],"type":"file","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","role":"pseudoSymbol","title":"Integrate views","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"title":"Your first feature","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","kind":"project","role":"project","estimatedTime":"20min","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol","title":"What is a side effect?","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","title":"Integrating into the app","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"title":"Navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"kind":"project","estimatedTime":"30min","role":"project","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"topic","title":"Multiple presentation destinations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Label"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:filepath:line:column:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Creates a navigation link that presents the view corresponding to an element of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":"."}],"role":"symbol","title":"init(state:label:fileID:filePath:line:column:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"L","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"label","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"L","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"02-04-02-code-0000.swift":{"fileName":"ContactsFeature.swift","type":"file","highlights":[{"line":9}],"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"fileType":"swift","identifier":"02-04-02-code-0000.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","kind":"section","title":"Testing state changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"kind":"project","title":"Composing features","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","role":"project","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","type":"topic","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for a type.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"kind":"section","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","type":"section","title":"Create a reducer","role":"pseudoSymbol"},"02-04-03-code-0004.swift":{"highlights":[{"line":42},{"line":43},{"line":44},{"line":45},{"line":46}],"fileName":"ContactsFeature.swift","identifier":"02-04-03-code-0004.swift","fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","","      case let .path(.element(id: id, action: .delegate(.confirmDeletion))):","        guard let detailState = state.path[id: id]","        else { return .none }","        state.contacts.remove(id: detailState.contact.id)","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}"],"syntax":"swift","type":"file"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"kind":"article","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","title":"Essentials","abstract":[],"type":"topic"},"02-04-02-code-0004.swift":{"content":["import ComposableArchitecture","import SwiftUI","","struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"identifier":"02-04-02-code-0004.swift","syntax":"swift","fileName":"ContactsFeature.swift","fileType":"swift","type":"file","highlights":[{"line":33},{"line":34}]},"02-04-01-code-0005.swift":{"type":"file","fileType":"swift","syntax":"swift","fileName":"ContactDetailFeature.swift","highlights":[{"line":1},{"line":5},{"line":6}],"identifier":"02-04-01-code-0005.swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","  }","}"]},"02-04-01-code-0003.swift":{"content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"identifier":"02-04-01-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"fileName":"ContactDetailFeature.swift","syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","defaultImplementations":2,"title":"body","required":true,"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Body","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa"}]},"02-04-01-code-0007.swift":{"fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","    }","    .navigationTitle(Text(store.contact.name))","  }","}","","#Preview {","  NavigationStack {","    ContactDetailView(","      store: Store(","        initialState: ContactDetailFeature.State(","          contact: Contact(id: UUID(), name: \"Blob\")","        )","      ) {","        ContactDetailFeature()","      }","    )","  }","}"],"type":"file","identifier":"02-04-01-code-0007.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileName":"ContactDetailFeature.swift"},"02-04-01-code-0006.swift":{"type":"file","fileType":"swift","syntax":"swift","fileName":"ContactDetailFeature.swift","highlights":[{"line":8},{"line":9},{"line":10}],"identifier":"02-04-01-code-0006.swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","    }","    .navigationTitle(Text(store.contact.name))","  }","}"]},"02-04-03-code-0002.swift":{"syntax":"swift","fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0002.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmDeletion)):","        return .run { send in","          await send(.delegate(.confirmDeletion))","          await self.dismiss()","        }","      case .alert:","        return .none","      case .delegate:","        return .none","      case .deleteButtonTapped:","        state.alert = .confirmDeletion","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","extension AlertState where Action == ContactDetailFeature.Action.Alert {","  static let confirmDeletion = Self {","    TextState(\"Are you sure?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmDeletion) {","      TextState(\"Delete\")","    }","  }","}"],"fileType":"swift","highlights":[{"line":21},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":39},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackAction","kind":"identifier"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"url":"\/documentation\/composablearchitecture\/stackaction","navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","title":"StackAction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"role":"pseudoSymbol","title":"Contact detail feature","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"02-04-02-code-0006.swift":{"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0006.swift","syntax":"swift","highlights":[{"line":11},{"line":42},{"line":43},{"line":44}],"type":"file","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    \/\/ case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case .destination:","        return .none","","      \/\/  case let .deleteButtonTapped(id: id):","      \/\/    state.destination = .alert(.deleteConfirmation(id: id))","      \/\/    return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}",""]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"role":"pseudoSymbol","title":"Deriving child stores","kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores"},"ch02-sub04-sec01-image-0000.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/ch02-sub04-sec01-image-0000.png"}],"type":"image","identifier":"ch02-sub04-sec01-image-0000.png","alt":null},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackState","kind":"identifier"}],"navigatorTitle":[{"text":"StackState","kind":"identifier"}],"abstract":[{"text":"A list of data representing the content of a navigation stack.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/stackstate","title":"StackState"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"title":"Drill-down to contact detail","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","type":"section","title":"Deleting a contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"02-04-03-code-0000.swift":{"syntax":"swift","fileName":"ContactDetailFeature.swift","fileType":"swift","type":"file","highlights":[{"line":7}],"identifier":"02-04-03-code-0000.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Controlling dependencies","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]}}}