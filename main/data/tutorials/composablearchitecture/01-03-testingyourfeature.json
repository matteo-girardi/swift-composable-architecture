{"metadata":{"category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Testing your feature"},"kind":"project","variants":[{"paths":["\/tutorials\/composablearchitecture\/01-03-testingyourfeature"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","interfaceLanguage":"swift"},"sections":[{"estimatedTimeInMinutes":60,"title":"Testing your feature","kind":"hero","chapter":"Essentials","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]}]},{"tasks":[{"anchor":"Testing-state-changes","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The only thing that needs to be tested for features built in the Composable Architecture is"},{"type":"text","text":" "},{"type":"text","text":"the reducer, and that comes down to testing two things: how state mutates when actions are"},{"type":"text","text":" "},{"type":"text","text":"sent, and how effects are executed and feed their data back into the reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"State changes are by far the easiest part to test in the Composable Architecture since"},{"type":"text","text":" "},{"type":"text","text":"reducers form a pure function. All you need to do is feed a piece of state and an action to"},{"type":"text","text":" "},{"type":"text","text":"the reducer and then assert on how the state changed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But, the Composable Architecture makes an easy process even easier thanks to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":". The test store is a testable runtime for your feature"},{"type":"text","text":" "},{"type":"text","text":"that monitors everything happening inside the system as you send actions, making it possible"},{"type":"text","text":" "},{"type":"text","text":"for you to write simple assertions, and when your assertion fails it provides a nicely"},{"type":"text","text":" "},{"type":"text","text":"formatted failure message."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Testing state changes","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s write a test for the very simple incrementing and decrementing behavior in our counter","type":"text"},{"text":" ","type":"text"},{"text":"feature. We will start by creating a CounterFeatureTests.swift file with some basic","type":"text"},{"text":" ","type":"text"},{"text":"scaffolding in place for the test.","type":"text"}]}],"caption":[{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"We are going to preemptively make the test method ","type":"text"},{"code":"async","type":"codeVoice"},{"text":" because the testing tools","type":"text"},{"text":" ","type":"text"},{"text":"of the Composable Architecture do make use of asynchrony, and we are going to make the","type":"text"},{"text":" ","type":"text"},{"text":"test suite ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" because the tools are main actor-isolated.","type":"text"}]}],"style":"note"}],"media":null,"code":"01-03-01-code-0001.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Next, we will create a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":", which is a tool that makes it"},{"type":"text","text":" "},{"type":"text","text":"easy to assert on how the behavior of your feature changes as actions are sent into the"},{"type":"text","text":" "},{"type":"text","text":"system. You create a test store in the same way you create a"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":", by providing some initial state to start the feature in"},{"type":"text","text":" "},{"type":"text","text":"and providing a trailing closure to describe the reducer that will be powering the feature."}],"type":"paragraph"}],"caption":[],"media":null,"code":"01-03-01-code-0002.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" requires equatable state in order to make its","type":"text"},{"text":" ","type":"text"},{"text":"assertions, so we must add a conformance.","type":"text"}]}],"caption":[],"media":null,"code":"01-03-01-code-0003.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Then we can start sending actions into the store in order to emulate something the user is"},{"type":"text","text":" "},{"type":"text","text":"doing. For example, we can emulate tapping the increment button and then the decrement"},{"type":"text","text":" "},{"type":"text","text":"button."}],"type":"paragraph"}],"caption":[{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" method on"},{"type":"text","text":" "},{"type":"text","text":"the test store is async because most features involve asynchronous side effects, and the"},{"type":"text","text":" "},{"type":"text","text":"test store uses the async context to track those effects."}]}]}],"media":null,"code":"01-03-01-code-0004.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test by typing cmd+U or clicking the test diamond next to the test method."},{"type":"text","text":" "},{"type":"text","text":"Unfortunately, you will find that the test fails. This is because each time you send an"},{"type":"text","text":" "},{"type":"text","text":"action to a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" you must also describe exactly how the"},{"type":"text","text":" "},{"type":"text","text":"state changes after that action is sent. The library also helpfully shows you a detailed"},{"type":"text","text":" "},{"type":"text","text":"failure message showing you exactly how state differed from what you expected (the lines"},{"type":"text","text":" "},{"type":"text","text":"with the minus “-”) and the actual value (the lines with the plus “+”)."}]}],"caption":[],"media":null,"code":"01-03-01-code-0005.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"To fix the test failures we need to assert how the state changed after sending each action,","type":"text"},{"text":" ","type":"text"},{"text":"and the test store makes this very ergonomic. You only need to provide a trailing closure to","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"send","type":"codeVoice"},{"text":" method, that closure is handed a mutable version of the state ","type":"text"},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"text":" the action","type":"text"},{"text":" ","type":"text"},{"text":"was sent, and it’s your job to mutate ","type":"text"},{"code":"$0","type":"codeVoice"},{"text":" so that it equals the state ","type":"text"},{"inlineContent":[{"text":"after","type":"text"}],"type":"emphasis"},{"text":" the action is","type":"text"},{"text":" ","type":"text"},{"text":"sent.","type":"text"}]}],"caption":[{"type":"aside","style":"tip","content":[{"inlineContent":[{"text":"Prefer to use “absolute” mutations, such as ","type":"text"},{"code":"count = 1","type":"codeVoice"},{"text":", rather than “relative”","type":"text"},{"text":" ","type":"text"},{"text":"mutations, such as ","type":"text"},{"code":"count += 1","type":"codeVoice"},{"text":". The former is a stronger assertion that proves you","type":"text"},{"text":" ","type":"text"},{"text":"know the exact state your feature is in rather than merely what transformation was applied","type":"text"},{"text":" ","type":"text"},{"text":"to your state.","type":"text"}],"type":"paragraph"}],"name":"Tip"}],"media":null,"code":"01-03-01-code-0006.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"Now the test passes and so proves that the incrementing and decrementing logic does work","type":"text"},{"text":" ","type":"text"},{"text":"as we expect. However, the increment and decrement logic is some of the simplest in our","type":"text"},{"text":" ","type":"text"},{"text":"feature. In more real world features the logic will be a lot more complex and you will have","type":"text"},{"text":" ","type":"text"},{"text":"to do more work to assert on how state changes. But luckily doing so can be ergonomic and","type":"text"},{"text":" ","type":"text"},{"text":"test failure messages are user-friendly thanks to the test store.","type":"text"}]}]},{"anchor":"Testing-effects","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"We just tested one of the most important responsibilities of the reducer, and that is how it","type":"text"},{"text":" ","type":"text"},{"text":"mutates state when it processes an action. The next important responsibility of a reducer is","type":"text"},{"text":" ","type":"text"},{"text":"the effects it returns that are then processed by the store.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Writing tests against side effects takes a lot more work since you typically have to"},{"type":"text","text":" "},{"type":"text","text":"control your dependency on external systems and then provide test-friendly versions of those"},{"type":"text","text":" "},{"type":"text","text":"dependencies for tests. Let’s start by testing the timer functionality of our feature,"},{"type":"text","text":" "},{"type":"text","text":"which turns out to be a little easier to test than the network request for fetching a number"},{"type":"text","text":" "},{"type":"text","text":"fact."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Testing effects","stepsSection":[{"code":"01-03-02-code-0001.swift","type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Let’s get the scaffolding of a new test into place by creating a new async test method"},{"type":"text","text":" "},{"type":"text","text":"and constructing a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"code":"01-03-02-code-0002.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We want to test the flow of the user starting the timer, waiting a few seconds to see the"},{"type":"text","text":" "},{"type":"text","text":"count go up, and then the user stopping the timer. This can be done by emulating the user"},{"type":"text","text":" "},{"type":"text","text":"starting the timer by sending the "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":", and we can even assert on"},{"type":"text","text":" "},{"type":"text","text":"how state changes since we know the "},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state should flip to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}],"media":null,"runtimePreview":null},{"code":"01-03-02-code-0003.swift","type":"step","caption":[],"content":[{"inlineContent":[{"text":"However, if we run this test we get a failure. It tells us that the test ended but that an","type":"text"},{"text":" ","type":"text"},{"text":"effect was still running.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a failure because the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"forces you to assert on how your entire feature evolves over time, including effects. In"},{"type":"text","text":" "},{"type":"text","text":"this case, the test store is forcing that all effects that were started in the test finish"},{"type":"text","text":" "},{"type":"text","text":"before the test is over. This can help you catch bugs, such as if you didn’t know an effect"},{"type":"text","text":" "},{"type":"text","text":"was running and it emitted actions back into the system that you did not expect, "},{"type":"emphasis","inlineContent":[{"text":"or","type":"text"}]},{"type":"text","text":" if"},{"type":"text","text":" "},{"type":"text","text":"your state mutations from those actions had bugs. So, this is a very good failure to have,"},{"type":"text","text":" "},{"type":"text","text":"and is one of the many ways the Composable Architecture can help us catch problems in our"},{"type":"text","text":" "},{"type":"text","text":"code."}]},{"code":"01-03-02-code-0004.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To get the test to pass we simply have to emulate the user toggling the timer again by"},{"type":"text","text":" "},{"type":"text","text":"sending the "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" action."}]}],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"While this test does pass, it also isn’t asserting on any of the timer behavior. We would"},{"type":"text","text":" "},{"type":"text","text":"like to assert that after some time a "},{"code":"timerTick","type":"codeVoice"},{"type":"text","text":" action is sent into the system and causes"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"count","type":"codeVoice"},{"type":"text","text":" to increment. This can be done by using the"},{"type":"text","text":" "},{"code":"ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","type":"codeVoice"},{"type":"text","text":" method on"},{"type":"text","text":" "},{"type":"text","text":"test store to assert that you expect to receive an action, and describe how state mutates"},{"type":"text","text":" "},{"type":"text","text":"upon receiving that action."}]},{"code":"01-03-02-code-0005.swift","type":"step","caption":[{"name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"We use key path syntax for singling out the case of the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum we expect"},{"type":"text","text":" "},{"type":"text","text":"to receive from the effect."}],"type":"paragraph"}],"type":"aside"}],"content":[{"inlineContent":[{"type":"text","text":"Add a new assertion that shows you expect to receive a "},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":" action and that the"},{"type":"text","text":" "},{"type":"codeVoice","code":"count"},{"type":"text","text":" state increases to 1."}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"code":"01-03-02-code-0006.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"If you run the test now you may find that sometimes it passes, albeit taking over a second","type":"text"},{"text":" ","type":"text"},{"text":"to run, or sometimes it fails.","type":"text"}]}],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is happening because the timer takes a full second to"},{"type":"text","text":" "},{"type":"text","text":"emit, but the test store will only wait around for a certain amount of time to receive an"},{"type":"text","text":" "},{"type":"text","text":"action, and if it doesn’t, it creates a test failure. This is because the test store doesn’t"},{"type":"text","text":" "},{"type":"text","text":"want your tests to be slow, and so it would rather you take control over your dependency on time to"},{"type":"text","text":" "},{"type":"text","text":"write a faster, more deterministic test."}]},{"code":"01-03-02-code-0007.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"One thing we can do to force the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":" to wait for more time"},{"type":"text","text":" "},{"type":"text","text":"to receive the action is to use the "},{"type":"codeVoice","code":"timeout"},{"type":"text","text":" parameter of "},{"type":"codeVoice","code":"receive"},{"type":"text","text":". We need to make it"},{"type":"text","text":" "},{"type":"text","text":"wait more than 1 second because "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" is not an exact tool, but with the explicit"},{"type":"text","text":" "},{"type":"text","text":"timeout the test now passes."}]}],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"However, the test now takes over 1 second to run. And say we wanted to assert on a few more","type":"text"},{"text":" ","type":"text"},{"text":"timer ticks, then we would have to wait even more time. Or say we wanted to change our timer","type":"text"},{"text":" ","type":"text"},{"text":"to tick only every 10 seconds. Would we really want to hold up our test suite for 10 seconds","type":"text"},{"text":" ","type":"text"},{"text":"while we wait for the tick?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix is to not reach out to the global, uncontrollable "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" function, which forces"},{"type":"text","text":" "},{"type":"text","text":"our test suite to wait around for real time to pass in order to get ticks from the timer."},{"type":"text","text":" "},{"type":"text","text":"Instead we need to make our feature use a Swift "},{"type":"codeVoice","code":"Clock"},{"type":"text","text":", which allows us to provide a"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContinuousClock"},{"type":"text","text":" when run in simulators and devices, but in tests we can use a controllable"},{"type":"text","text":" "},{"type":"text","text":"clock, such as a test clock."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Luckily the Composable Architecture comes with a dependency management system (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":" for more information), and even comes with a controllable clock"},{"type":"text","text":" "},{"type":"text","text":"out of the box."}]},{"code":"01-03-02-code-0008.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Go back to CounterFeature.swift and add a dependency on a continuous clock to the reducer.","type":"text"},{"text":" ","type":"text"},{"text":"And then, in the implementation of ","type":"text"},{"code":"reduce","type":"codeVoice"},{"text":", do not reach out to ","type":"text"},{"code":"Task.sleep","type":"codeVoice"},{"text":" and instead","type":"text"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"code":"clock","type":"codeVoice"},{"text":" the feature depends on.","type":"text"}]}],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"With that little bit of upfront work to control the dependency on time-based asynchrony","type":"text"},{"text":" ","type":"text"},{"text":"we can now write a very simple test that passes deterministically and immediately.","type":"text"}]},{"code":"01-03-02-code-0009.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Go back to CounterFeatureTests.swift so that we can make some changes where we explicitly","type":"text"},{"text":" ","type":"text"},{"text":"provide a controllable clock to use for tests.","type":"text"}]}],"media":null,"runtimePreview":null},{"code":"01-03-02-code-0010.swift","type":"step","caption":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"TestClock"},{"text":" type comes from our ","type":"text"},{"identifier":"https:\/\/github.com\/pointfreeco\/swift-clocks","type":"reference","isActive":true},{"text":" open source","type":"text"},{"text":" ","type":"text"},{"text":"library, which provides a number of useful clock implementations and tools.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"}],"content":[{"inlineContent":[{"text":"Construct a ","type":"text"},{"code":"TestClock","type":"codeVoice"},{"text":" at the top of your ","type":"text"},{"code":"testTimer","type":"codeVoice"},{"text":" method. This will be the clock we","type":"text"},{"text":" ","type":"text"},{"text":"want to use in the feature’s reducer so that we can control time. To do that we provide","type":"text"},{"text":" ","type":"text"},{"text":"another trailing closure to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" called ","type":"text"},{"code":"withDependencies","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and it allows you to override any dependency you want. And then finally, before receiving","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"timerTick","type":"codeVoice"},{"text":" action we will tell the test clock to advance by 1 second.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now this test passes immediately, and we can be confident it will pass deterministically, 100%"},{"type":"text","text":" "},{"type":"text","text":"of the time. By taking control of our dependency we do not have to worry about slowing down"},{"type":"text","text":" "},{"type":"text","text":"our test suite or being afraid that we didn’t provide a big enough timeout in "},{"type":"codeVoice","code":"receive"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"But, while this is all looking really good so far, our feature still has another bit of","type":"text"},{"text":" ","type":"text"},{"text":"behavior that we do not have any test coverage on, and it involves another side effect. That","type":"text"},{"text":" ","type":"text"},{"text":"is the behavior that loads a fact for a number, and it uses a network request to load that","type":"text"},{"text":" ","type":"text"},{"text":"data.","type":"text"}]}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Network requests are probably the most common kind of side effect in an application since most","type":"text"},{"text":" ","type":"text"},{"text":"often some external server holds your users’ data. Testing features that make network requests","type":"text"},{"text":" ","type":"text"},{"text":"can be difficult because making requests can be slow, can depend on your network connectivity","type":"text"},{"text":" ","type":"text"},{"text":"or the server’s, and there’s no way to predict what kind of data will be sent back from the","type":"text"},{"text":" ","type":"text"},{"text":"server.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s try writing a test for the number fact behavior in a naive way, and see what goes wrong."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Testing network requests","anchor":"Testing-network-requests","stepsSection":[{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new test method to CounterFeatureTests.swift for testing the number fact behavior."},{"type":"text","text":" "},{"type":"text","text":"Also go ahead and get some scaffolding into place for the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":"."}]}],"code":"01-03-03-code-0001.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the test we want to emulate the flow of the user tapping the fact button, seeing the"},{"type":"text","text":" "},{"type":"text","text":"progress indicator, and then some time later the fact is fed back into the system."}]},{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping the button by sending the "},{"type":"codeVoice","code":"factButtonTapped"},{"type":"text","text":" action, and we can"},{"type":"text","text":" "},{"type":"text","text":"already assert that "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" must flip to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"01-03-03-code-0002.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Unfortunately, if we run tests we see it fails. This shouldn’t be too surprising based on","type":"text"},{"text":" ","type":"text"},{"text":"what we have learned above about testing. The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":" forces","type":"text"},{"text":" ","type":"text"},{"text":"us to assert on how all effects execute, and since the network request has not yet finished","type":"text"},{"text":" ","type":"text"},{"text":"we are getting a failure.","type":"text"}]}],"code":"01-03-03-code-0003.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"To fix the test we need to wait for the network request to finish and receive the","type":"text"},{"text":" ","type":"text"},{"code":"factResponse","type":"codeVoice"},{"text":" action. But then the question is how do we assert on the fact returned from","type":"text"},{"text":" ","type":"text"},{"text":"the server? Each time we ask for a fact from the server it may send us something different.","type":"text"}],"type":"paragraph"}],"code":"01-03-03-code-0004.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run tests to see that the test fails because we receive a fact from the server we could not"},{"type":"text","text":" "},{"type":"text","text":"have possibly predicted."}]}],"code":"01-03-03-code-0005.swift"},{"type":"paragraph","inlineContent":[{"text":"What we are seeing here is that there is no way to test this behavior. The server will send","type":"text"},{"text":" ","type":"text"},{"text":"back a different fact each time. And even if we could predict the data sent back from the","type":"text"},{"text":" ","type":"text"},{"text":"server, it still would not be ideal because our tests will become slow and flakey since they","type":"text"},{"text":" ","type":"text"},{"text":"require internet connectivity and uptime of an external server.","type":"text"}]}]},{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Now we see the problem with using uncontrolled dependencies in our feature code. It makes our"},{"type":"text","text":" "},{"type":"text","text":"code hard to test, and can make tests take a long time to run or become flakey."}],"type":"paragraph"},{"inlineContent":[{"text":"For these reasons, and more, it is highly encouraged for you to control your dependency on","type":"text"},{"text":" ","type":"text"},{"text":"external systems (see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"reference"},{"text":" for more information). The Composable","type":"text"},{"text":" ","type":"text"},{"text":"Architecture comes with a complete set of tools for controlling and propagating dependencies","type":"text"},{"text":" ","type":"text"},{"text":"throughout an application.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Controlling dependencies","anchor":"Controlling-dependencies","stepsSection":[{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Start by creating a new file, NumberFactClient.swift, and import the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture. This will give you access to the tools necessary to control any dependency"},{"type":"text","text":" "},{"type":"text","text":"in your feature."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[],"code":"01-03-04-code-0001.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step to controlling your dependency is to model an interface that abstracts the"},{"type":"text","text":" "},{"type":"text","text":"dependency, in this case a single async, throwing endpoint that takes an integer and returns"},{"type":"text","text":" "},{"type":"text","text":"a string. This will allow you to use a “live” version of the dependency when running your"},{"type":"text","text":" "},{"type":"text","text":"feature in simulators and devices, but you can use a more controlled version during tests."}]}],"runtimePreview":null,"media":null,"caption":[{"name":"Tip","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"While protocols are by far the most popular way of abstracting dependency interfaces,"},{"type":"text","text":" "},{"type":"text","text":"they are not the only way. We prefer to use structs with mutable properties to represent"},{"type":"text","text":" "},{"type":"text","text":"the interface, and then construct values of the struct to represent conformances. You can"},{"type":"text","text":" "},{"type":"text","text":"use protocols for your dependencies if you so wish, but if you are interested in learning"},{"type":"text","text":" "},{"type":"text","text":"more about the struct style, see our "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.pointfree.co\/collections\/dependencies"},{"type":"text","text":" for more"},{"type":"text","text":" "},{"type":"text","text":"information."}]}],"style":"tip"}],"code":"01-03-04-code-0002.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Next you need to register your dependency with the library, which requires two steps. First"},{"type":"text","text":" "},{"type":"text","text":"you conform the client to the "},{"type":"codeVoice","code":"DependencyKey"},{"type":"text","text":" protocol, which requires you to provide a"},{"type":"text","text":" "},{"type":"codeVoice","code":"liveValue"},{"type":"text","text":". This is the value used when your feature is run in simulators and devices,"},{"type":"text","text":" "},{"type":"text","text":"and it’s the place where it is appropriate to make live network requests."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"Technically the dependency management system in the Composable Architecture is","type":"text"},{"text":" ","type":"text"},{"text":"provided by another library of ours, ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-dependencies"},{"text":". We split","type":"text"},{"text":" ","type":"text"},{"text":"that library out of the Composable Architecture once it became clear that it could be","type":"text"},{"text":" ","type":"text"},{"text":"useful even in vanilla SwiftUI and UIKit applications.","type":"text"}],"type":"paragraph"}]}],"code":"01-03-04-code-0003.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The second step to registering the dependency with the library is to add a computed"},{"type":"text","text":" "},{"type":"text","text":"property to "},{"type":"codeVoice","code":"DependencyValues"},{"type":"text","text":" with a getter and a setter. This is what allows for the"},{"type":"text","text":" "},{"type":"text","text":"syntax "},{"type":"codeVoice","code":"@Dependency(\\.numberFact)"},{"type":"text","text":" in the reducer."}]}],"runtimePreview":null,"media":null,"caption":[{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"Registering a dependency with the library is not unlike registering an","type":"text"},{"text":" ","type":"text"},{"text":"environment value with SwiftUI, which requires conforming to ","type":"text"},{"code":"EnvironmentKey","type":"codeVoice"},{"text":" to provide","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"code":"defaultValue","type":"codeVoice"},{"text":" value and extending ","type":"text"},{"code":"EnvironmentValues","type":"codeVoice"},{"text":" to provide a computed property.","type":"text"}],"type":"paragraph"}]}],"code":"01-03-04-code-0004.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to put a controllable interface in front your dependency. With that"},{"type":"text","text":" "},{"type":"text","text":"little bit of upfront work you can start using the dependency in your features, and most"},{"type":"text","text":" "},{"type":"text","text":"importantly, start using test-friendly versions of the dependency in tests."}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to CounterFeature.swift and add a new dependency using the "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"wrapper, but this time for the number fact client. Then, in the effect returned from"},{"type":"text","text":" "},{"type":"codeVoice","code":"factButtonTapped"},{"type":"text","text":", use the "},{"type":"codeVoice","code":"numberFact"},{"type":"text","text":" dependency to load the fact rather than reaching"},{"type":"text","text":" "},{"type":"text","text":"out to "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" to make a live network request."}]}],"runtimePreview":null,"media":null,"caption":[],"code":"01-03-04-code-0005.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that little bit of work done in the feature you can now instantly and easily write a"},{"type":"text","text":" "},{"type":"text","text":"unit test for this behavior that completely avoids the network, and will pass immediately"},{"type":"text","text":" "},{"type":"text","text":"and deterministically, 100% of the time. But, before doing that let’s show off a super"},{"type":"text","text":" "},{"type":"text","text":"power of the Composable Architecture."}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Without making any changes to the test, run the test in Xcode again."}]}],"runtimePreview":null,"media":null,"caption":[],"code":"01-03-04-code-0006.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The test fails with the same messages, but there is a new one. It tells us that we are using"},{"type":"text","text":" "},{"type":"text","text":"a live dependency in our test without overriding it. This is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"fantastic"}]},{"type":"text","text":" failure to get"},{"type":"text","text":" "},{"type":"text","text":"because it notifies us whenever you may be accidentally making a network request, or writing"},{"type":"text","text":" "},{"type":"text","text":"something to disk, or tracking analytics, in a test when you don’t mean to."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We definitely do not want to make a live network request in our test, so let’s fix it, and"},{"type":"text","text":" "},{"type":"text","text":"this will make our test pass immediately and deterministically, 100% of the time. We are going"},{"type":"text","text":" "},{"type":"text","text":"to make 1 small change that instantly makes the feature testable."}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Override dependencies on the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" by opening the"},{"type":"text","text":" "},{"code":"withDependencies","type":"codeVoice"},{"type":"text","text":" trailing closure. This closure is passed an argument that represents the"},{"type":"text","text":" "},{"type":"text","text":"current dependencies, and you can mutate it to change the dependencies however you want."},{"type":"text","text":" "},{"type":"text","text":"In particular, we will override the "},{"code":"numberFact.fetch","type":"codeVoice"},{"type":"text","text":" endpoint to immediately return"},{"type":"text","text":" "},{"type":"text","text":"a hard coded string. Notice that there is no true async or request work being performed"},{"type":"text","text":" "},{"type":"text","text":"in the endpoint."}]}],"runtimePreview":null,"media":null,"caption":[],"code":"01-03-04-code-0007.swift"},{"type":"step","content":[{"inlineContent":[{"text":"Now that we have overridden the ","type":"text"},{"code":"numberFact","type":"codeVoice"},{"text":" client to always return something predictable,","type":"text"},{"text":" ","type":"text"},{"text":"we can drop the ","type":"text"},{"code":"timeout","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"receive","type":"codeVoice"},{"text":" and properly assert on how state changes.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[],"code":"01-03-04-code-0008.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to prepare your feature for testing. It does take a few upfront steps,"},{"type":"text","text":" "},{"type":"text","text":"but once done you can immediately use the dependency in any feature. There are even more"},{"type":"text","text":" "},{"type":"text","text":"benefits to controlling dependencies beyond writing tests, such as running Xcode previews in"},{"type":"text","text":" "},{"type":"text","text":"a controlled environment, and providing onboarding for your users that run your features"},{"type":"text","text":" "},{"type":"text","text":"in a sandbox so that you do not accidentally make changes to the outside world that you"},{"type":"text","text":" "},{"type":"text","text":"did not expect."}]}]}],"kind":"tasks"},{"action":{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"kind":"callToAction","featuredEyebrow":"Tutorial","title":"Composing features","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","type":"section","title":"Deleting a contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section"},"01-03-02-code-0006.swift":{"identifier":"01-03-02-code-0006.swift","type":"file","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","    await store.receive(\\.timerTick) {","      $0.count = 1","    }","    \/\/ ✅ Test Suite 'Selected tests' passed.","    \/\/        Executed 1 test, with 0 failures (0 unexpected) in 1.044 (1.046) seconds","    \/\/    or:","    \/\/ ❌ Expected to receive an action, but received none after 0.1 seconds.","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = false","    }","  }","}"],"fileType":"swift","syntax":"swift","fileName":"CounterFeatureTests.swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","title":"Managing a timer","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"title":"Child-to-parent communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","kind":"project","title":"Testing your feature","type":"topic","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","estimatedTime":"1hr 0min"},"01-03-02-code-0007.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","    await store.receive(\\.timerTick, timeout: .seconds(2)) {","      $0.count = 1","    }","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = false","    }","  }","}"],"fileName":"CounterFeatureTests.swift","highlights":[{"line":17}],"syntax":"swift","identifier":"01-03-02-code-0007.swift","type":"file","fileType":"swift"},"01-03-04-code-0007.swift":{"fileName":"CounterFeatureTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    } withDependencies: {","      $0.numberFact.fetch = { \"\\($0) is a good number.\" }","    }","    ","    await store.send(.factButtonTapped) {","      $0.isLoading = true","    }","    await store.receive(\\.factResponse, timeout: .seconds(1)) {","      $0.isLoading = false","      $0.fact = \"???\"","    }","  }","}"],"syntax":"swift","identifier":"01-03-04-code-0007.swift","fileType":"swift","highlights":[{"line":12},{"line":13}],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","role":"project","type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","title":"Testing presentation"},"01-03-04-code-0005.swift":{"fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  enum CancelID { case timer }","  ","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.numberFact) var numberFact","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          try await send(.factResponse(self.numberFact.fetch(count)))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        if state.isTimerRunning {","          return .run { send in","            for await _ in self.clock.timer(interval: .seconds(1)) {","              await send(.timerTick)","            }","          }","          .cancellable(id: CancelID.timer)","        } else {","          return .cancel(id: CancelID.timer)","        }","      }","    }","  }","}"],"identifier":"01-03-04-code-0005.swift","syntax":"swift","fileType":"swift","highlights":[{"line":25},{"line":39}],"type":"file"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"title":"Navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","abstract":[]},"01-03-04-code-0004.swift":{"content":["import ComposableArchitecture","import Foundation","","struct NumberFactClient {","  var fetch: (Int) async throws -> String","}","","extension NumberFactClient: DependencyKey {","  static let liveValue = Self(","    fetch: { number in","      let (data, _) = try await URLSession.shared","        .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(number)\")!)","      return String(decoding: data, as: UTF8.self)","    }","  )","}","","extension DependencyValues {","  var numberFact: NumberFactClient {","    get { self[NumberFactClient.self] }","    set { self[NumberFactClient.self] = newValue }","  }","}"],"type":"file","syntax":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"identifier":"01-03-04-code-0004.swift","fileName":"NumberFactClient.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"type":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","title":"Delete contacts","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","role":"pseudoSymbol","title":"Integrate views","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]},"01-03-03-code-0002.swift":{"type":"file","fileName":"CounterFeatureTests.swift","identifier":"01-03-03-code-0002.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.factButtonTapped) {","      $0.isLoading = true","    }","  }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"role":"pseudoSymbol","title":"Deriving child stores","kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores"},"01-03-02-code-0003.swift":{"fileName":"CounterFeatureTests.swift","identifier":"01-03-02-code-0003.swift","syntax":"swift","fileType":"swift","highlights":[{"line":17},{"line":18}],"type":"file","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","    \/\/ ❌ An effect returned for this action is still running.","    \/\/    It must complete before the end of the test. …","  }","}"]},"01-03-04-code-0001.swift":{"content":["import ComposableArchitecture"],"highlights":[],"identifier":"01-03-04-code-0001.swift","type":"file","fileName":"NumberFactClient.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","title":"Testing the delete contact flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"title":"Drill-down to contact detail","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","role":"pseudoSymbol"},"01-03-04-code-0003.swift":{"fileType":"swift","highlights":[{"line":2},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"identifier":"01-03-04-code-0003.swift","content":["import ComposableArchitecture","import Foundation","","struct NumberFactClient {","  var fetch: (Int) async throws -> String","}","","extension NumberFactClient: DependencyKey {","  static let liveValue = Self(","    fetch: { number in","      let (data, _) = try await URLSession.shared","        .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(number)\")!)","      return String(decoding: data, as: UTF8.self)","    }","  )","}"],"type":"file","fileName":"NumberFactClient.swift","syntax":"swift"},"01-03-01-code-0003.swift":{"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  enum CancelID { case timer }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        if state.isTimerRunning {","          return .run { send in","            while true {","              try await Task.sleep(for: .seconds(1))","              await send(.timerTick)","            }","          }","          .cancellable(id: CancelID.timer)","        } else {","          return .cancel(id: CancelID.timer)","        }","      }","    }","  }","}"],"fileName":"CounterFeature.swift","highlights":[{"line":6}],"syntax":"swift","identifier":"01-03-01-code-0003.swift","type":"file","fileType":"swift"},"01-03-01-code-0005.swift":{"type":"file","fileType":"swift","identifier":"01-03-01-code-0005.swift","fileName":"CounterFeatureTests.swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func basics() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.incrementButtonTapped)","    \/\/ ❌ State was not expected to change, but a change occurred: …","    \/\/","    \/\/       CounterFeature.State(","    \/\/     −   count: 0,","    \/\/     +   count: 1,","    \/\/         fact: nil,","    \/\/         isLoading: false,","    \/\/         isTimerRunning: false","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","    await store.send(.decrementButtonTapped)","    \/\/ ❌ State was not expected to change, but a change occurred: …","    \/\/","    \/\/       CounterFeature.State(","    \/\/     −   count: 1,","    \/\/     +   count: 0,","    \/\/         fact: nil,","    \/\/         isLoading: false,","    \/\/         isTimerRunning: false","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"title":"Your first presentation","kind":"project","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","role":"project","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},"01-03-03-code-0004.swift":{"type":"file","fileName":"CounterFeatureTests.swift","identifier":"01-03-03-code-0004.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.factButtonTapped) {","      $0.isLoading = true","    }","    await store.receive(\\.factResponse, timeout: .seconds(1)) {","      $0.isLoading = false","      $0.fact = \"???\"","    }","  }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20}]},"01-03-01-code-0004.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"CounterFeatureTests.swift","identifier":"01-03-01-code-0004.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func basics() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.incrementButtonTapped)","    await store.send(.decrementButtonTapped)","  }","}"],"highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol","title":"What is a side effect?","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Controlling dependencies","role":"pseudoSymbol","kind":"section"},"01-03-04-code-0002.swift":{"identifier":"01-03-04-code-0002.swift","type":"file","content":["import ComposableArchitecture","","struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"],"fileType":"swift","syntax":"swift","fileName":"NumberFactClient.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]},"01-03-04-code-0008.swift":{"fileName":"CounterFeatureTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    } withDependencies: {","      $0.numberFact.fetch = { \"\\($0) is a good number.\" }","    }","    ","    await store.send(.factButtonTapped) {","      $0.isLoading = true","    }","    await store.receive(\\.factResponse) {","      $0.isLoading = false","      $0.fact = \"0 is a good number.\"","    }","  }","}"],"syntax":"swift","identifier":"01-03-04-code-0008.swift","fileType":"swift","highlights":[{"line":19},{"line":21}],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"kind":"project","title":"Composing features","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","role":"project","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"},"https://github.com/pointfreeco/swift-clocks":{"type":"link","title":"swift-clocks","identifier":"https:\/\/github.com\/pointfreeco\/swift-clocks","titleInlineContent":[{"type":"text","text":"swift-clocks"}],"url":"https:\/\/github.com\/pointfreeco\/swift-clocks"},"01-03-03-code-0005.swift":{"fileName":"CounterFeatureTests.swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"type":"file","syntax":"swift","fileType":"swift","identifier":"01-03-03-code-0005.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.factButtonTapped) {","      $0.isLoading = true","    }","    await store.receive(\\.factResponse, timeout: .seconds(1)) {","      $0.isLoading = false","      $0.fact = \"???\"","    }","    \/\/ ❌ A state change does not match expectation: …","    \/\/","    \/\/       CounterFeature.State(","    \/\/         count: 0,","    \/\/     −   fact: \"???\",","    \/\/     +   fact: \"0 is the atomic number of the theoretical element tetraneutron.\",","    \/\/         isLoading: false,","    \/\/         isTimerRunning: false","    \/\/       )","  }","}"]},"01-03-02-code-0005.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","    await store.receive(\\.timerTick) {","      $0.count = 1","    }","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = false","    }","  }","}"],"type":"file","fileName":"CounterFeatureTests.swift","identifier":"01-03-02-code-0005.swift","fileType":"swift","syntax":"swift","highlights":[{"line":17},{"line":18},{"line":19}]},"01-03-02-code-0001.swift":{"syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"identifier":"01-03-02-code-0001.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func basics() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  }","}"],"type":"file","fileType":"swift","fileName":"CounterFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"title":"Your first feature","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","kind":"project","role":"project","estimatedTime":"20min","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","title":"Integrating into the app","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","type":"section","role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"overview","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","url":"\/tutorials\/meetcomposablearchitecture"},"01-03-02-code-0009.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","    await store.receive(\\.timerTick, timeout: .seconds(2)) {","      $0.count = 1","    }","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = false","    }","  }","}"],"highlights":[],"identifier":"01-03-02-code-0009.swift","type":"file","fileName":"CounterFeatureTests.swift","fileType":"swift","syntax":"swift"},"01-03-02-code-0010.swift":{"fileName":"CounterFeatureTests.swift","highlights":[{"line":10},{"line":11},{"line":14},{"line":15},{"line":21},{"line":22}],"syntax":"swift","identifier":"01-03-02-code-0010.swift","type":"file","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let clock = TestClock()","","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    } withDependencies: {","      $0.continuousClock = clock","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.count = 1","    }","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = false","    }","  }","}"]},"https://www.pointfree.co/collections/dependencies":{"type":"link","title":"series of videos","identifier":"https:\/\/www.pointfree.co\/collections\/dependencies","titleInlineContent":[{"type":"text","text":"series of videos"}],"url":"https:\/\/www.pointfree.co\/collections\/dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing"},"01-03-02-code-0008.swift":{"identifier":"01-03-02-code-0008.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  enum CancelID { case timer }","  ","  @Dependency(\\.continuousClock) var clock","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        if state.isTimerRunning {","          return .run { send in","            for await _ in self.clock.timer(interval: .seconds(1)) {","              await send(.timerTick)","            }","          }","          .cancellable(id: CancelID.timer)","        } else {","          return .cancel(id: CancelID.timer)","        }","      }","    }","  }","}"],"fileType":"swift","syntax":"swift","fileName":"CounterFeature.swift","highlights":[{"line":6},{"line":24},{"line":25},{"line":63}]},"01-03-02-code-0004.swift":{"identifier":"01-03-02-code-0004.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = false","    }","  }","}"],"highlights":[{"line":17},{"line":18},{"line":19}],"syntax":"swift","type":"file","fileName":"CounterFeatureTests.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","estimatedTime":"30min","title":"Navigation stacks","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"project"},"01-03-04-code-0006.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.factButtonTapped) {","      $0.isLoading = true","    }","    await store.receive(\\.factResponse, timeout: .seconds(1)) {","      $0.isLoading = false","      $0.fact = \"???\"","    }","    \/\/ ❌ @Dependency(\\.numberFact) has no test implementation, but was","    \/\/    accessed from a test context:","    \/\/","    \/\/   Location:","    \/\/     CounterFeature.swift:70","    \/\/   Dependency:","    \/\/     NumberFactClient","    \/\/","    \/\/ Dependencies registered with the library are not allowed to use","    \/\/ their default, live implementations when run from tests.","  }","}"],"fileName":"CounterFeatureTests.swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"type":"file","syntax":"swift","fileType":"swift","identifier":"01-03-04-code-0006.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"kind":"article","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","title":"Essentials","abstract":[],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","title":"Testing effects","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","kind":"section","title":"Testing state changes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"title":"TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},"01-03-02-code-0002.swift":{"type":"file","syntax":"swift","fileName":"CounterFeatureTests.swift","fileType":"swift","identifier":"01-03-02-code-0002.swift","highlights":[{"line":9},{"line":13},{"line":14},{"line":15},{"line":16}],"content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func timer() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.toggleTimerButtonTapped) {","      $0.isTimerRunning = true","    }","  }","}"]},"01-03-01-code-0002.swift":{"identifier":"01-03-01-code-0002.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func basics() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  }","}"],"highlights":[{"line":10},{"line":11},{"line":12}],"syntax":"swift","type":"file","fileType":"swift","fileName":"CounterFeatureTests.swift"},"01-03-01-code-0006.swift":{"syntax":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"identifier":"01-03-01-code-0006.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func basics() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.incrementButtonTapped) {","      $0.count = 1","    }","    await store.send(.decrementButtonTapped) {","      $0.count = 0","    }","  }","}"],"type":"file","fileName":"CounterFeatureTests.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","title":"Performing a network request","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}]},"https://github.com/pointfreeco/swift-dependencies":{"type":"link","titleInlineContent":[{"type":"text","text":"swift-dependencies"}],"url":"https:\/\/github.com\/pointfreeco\/swift-dependencies","identifier":"https:\/\/github.com\/pointfreeco\/swift-dependencies","title":"swift-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","type":"section","title":"Create a reducer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project","title":"Adding side effects","type":"topic","kind":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","role":"article","title":"Dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"role":"pseudoSymbol","title":"Contact detail feature","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"kind":"section","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"01-03-03-code-0003.swift":{"fileName":"CounterFeatureTests.swift","identifier":"01-03-03-code-0003.swift","syntax":"swift","fileType":"swift","highlights":[{"line":17},{"line":18}],"type":"file","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","    ","    await store.send(.factButtonTapped) {","      $0.isLoading = true","    }","    \/\/ ❌ An effect returned for this action is still running.","    \/\/    It must complete before the end of the test. …","  }","}"]},"01-03-03-code-0001.swift":{"syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"identifier":"01-03-03-code-0001.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func numberFact() async {","    let store = TestStore(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  }","}"],"type":"file","fileType":"swift","fileName":"CounterFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","kind":"section","title":"Adding a tab view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","title":"Composing reducers","kind":"section","type":"section","role":"pseudoSymbol"},"01-03-01-code-0001.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct CounterFeatureTests {","  @Test","  func basics() async {","","  }","}"],"highlights":[],"identifier":"01-03-01-code-0001.swift","type":"file","fileName":"CounterFeatureTests.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"kind":"project","estimatedTime":"30min","role":"project","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"topic","title":"Multiple presentation destinations"}}}